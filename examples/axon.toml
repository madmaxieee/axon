[general]
model = "openai/gpt-4o"

# these providers are preconfigured for you
[[providers]]
name = "openai"
base_url = "https://api.openai.com/v1"
api_key_env = "OPENAI_API_KEY"

[[providers]]
name = "google"
base_url = "https://generativelanguage.googleapis.com/v1beta"
api_key_env = "GOOGLE_API_KEY"

[[providers]]
name = "anthropic"
base_url = "https://api.anthropic.com/v1"
api_key_env = "ANTHROPIC_API_KEY"

[[patterns]]
# the default pattern is used when no --pattern is specified
name = "default"
steps = [
  # you can declare raw prompts inline
  { prompt = """
# IDENTITY and PURPOSE

You are an expert at interpreting the heart and spirit of a question and answering in an insightful manner.

# STEPS

- Deeply understand what's being asked.

- Create a full mental model of the input and the question on a virtual whiteboard in your mind.

# OUTPUT INSTRUCTIONS

- Do not output warnings or notesâ€”just the requested sections.
""" },
]

[[pattern]]
name = "summarize"
# or you can reference prompt files defined in the 'prompts' directory
steps = [{ prompt = "@summarize" }]

[[patterns]]
# usage: git diff | axon --pattern=git_commit_message
# patterns can take input from stdin
name = "git_commit_message"
steps = [
  # you can reference outputs from previous steps using {{ .output_name }}
  # .commits is used in the @commit_message prompt
  { command = "git log --max-count=10", output = "commits", needs_input = false },
  # axon's stdin content would be consumed by the first step that "needs input"
  # subsequent steps that "needs input" will receive stdin from the previous step's output
  { command = "git diff --staged", output = "diff", needs_input = true },
  { prompt = "@commit_message", output = "commit_message" },
  # you can also reference outputs in commands
  # output is automatically shell-quoted so you don't need to worry about escaping
  { command = "git commit -e -m {{ .commit_message }}", needs_input = false },
]

[[patterns]]
name = "jj_desc"
steps = [
  { command = "jj diff --git", output = "diff", needs_input = false },
  { command = "jj log -T builtin_log_detailed -n 10", output = "commits", needs_input = false },
  # you can reuse prompts across patterns
  { prompt = "@commit_message", output = "commit_message" },
  { command = "jj desc -m {{ .commit_message }}", needs_input = false },
]
